syntax = "proto3";

package tokenfactory.tokenfactory;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "cosmos/tokenfactory/params.proto";
import "cosmos/tokenfactory/denom.proto";

option go_package = "github.com/cosmos/cosmos-sdk/x/tokenfactory/types";

// Msg defines the Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;
  
  // UpdateParams defines a (governance) operation for updating the module
  // parameters. The authority defaults to the x/gov module account.
  rpc UpdateParams (MsgUpdateParams) returns (MsgUpdateParamsResponse);
  rpc CreateDenom  (MsgCreateDenom ) returns (MsgCreateDenomResponse );
  rpc UpdateDenom  (MsgUpdateDenom ) returns (MsgUpdateDenomResponse );
  rpc DeleteDenom  (MsgDeleteDenom ) returns (MsgDeleteDenomResponse );
  rpc UpdateOwner  (MsgUpdateOwner ) returns (MsgUpdateOwnerResponse );
}
// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) =                                   "authority";
  option           (amino.name) = "github.com/cosmos/cosmos-sdk/x/tokenfactory/MsgUpdateParams";
  
  // authority is the address that controls the module (defaults to x/gov unless overwritten).
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the module parameters to update.
  
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}

message MsgCreateDenom {
  option (cosmos.msg.v1.signer) = "owner";
  string owner     = 1;
  string denom     = 2;
  string ticker    = 3;
  int32  precision = 4;
  int32  maxSupply = 5;
}

message MsgCreateDenomResponse {}

message MsgUpdateDenom {
  option (cosmos.msg.v1.signer) = "owner";
  string owner     = 1;
  string denom     = 2;
  string ticker    = 3;
  int32  precision = 4;
  int32  maxSupply = 5;
}

message MsgUpdateDenomResponse {}

message MsgDeleteDenom {
  option (cosmos.msg.v1.signer) = "owner";
  string owner = 1;
  string denom = 2;
}

message MsgDeleteDenomResponse {}

message MsgUpdateOwner {
  option (cosmos.msg.v1.signer) = "owner";
  string owner    = 1;
  string denom    = 2;
  string newOwner = 3;
}

message MsgUpdateOwnerResponse {}

